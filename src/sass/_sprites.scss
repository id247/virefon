/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$back-name: 'back';
$back-x: 148px;
$back-y: 52px;
$back-offset-x: -148px;
$back-offset-y: -52px;
$back-width: 36px;
$back-height: 36px;
$back-total-width: 208px;
$back-total-height: 104px;
$back-image: '../images/sprite.png';
$back: (148px, 52px, -148px, -52px, 36px, 36px, 208px, 104px, '../images/sprite.png', 'back', );
$logotype-name: 'logotype';
$logotype-x: 0px;
$logotype-y: 52px;
$logotype-offset-x: 0px;
$logotype-offset-y: -52px;
$logotype-width: 148px;
$logotype-height: 52px;
$logotype-total-width: 208px;
$logotype-total-height: 104px;
$logotype-image: '../images/sprite.png';
$logotype: (0px, 52px, 0px, -52px, 148px, 52px, 208px, 104px, '../images/sprite.png', 'logotype', );
$viferon-name: 'viferon';
$viferon-x: 0px;
$viferon-y: 0px;
$viferon-offset-x: 0px;
$viferon-offset-y: 0px;
$viferon-width: 208px;
$viferon-height: 52px;
$viferon-total-width: 208px;
$viferon-total-height: 104px;
$viferon-image: '../images/sprite.png';
$viferon: (0px, 0px, 0px, 0px, 208px, 52px, 208px, 104px, '../images/sprite.png', 'viferon', );
$spritesheet-width: 208px;
$spritesheet-height: 104px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($back, $logotype, $viferon, );
$spritesheet: (208px, 104px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
